import { c as SvelteComponentDev, k as addLoc, w as append, n as createElement, o as createText, p as detachNode, q as flush, g as init, s as insert, b as noop, h as safe_not_equal, x as setData } from './chunk-86bcbbe4.js';

/* src\Components\Regex.html generated by Svelte v3.0.0-alpha20 */

const file = "src\\Components\\Regex.html";

function create_fragment(ctx) {
	var h1, text1, p0, strong, text3, pre, text4_value = JSON.stringify(ctx.route,null,2), text4, text5, p1, text6, a;

	return {
		c: function create() {
			h1 = createElement("h1");
			h1.textContent = "Regex Route";
			text1 = createText("\r\n\r\n");
			p0 = createElement("p");
			strong = createElement("strong");
			strong.textContent = "route:";
			text3 = createText("\r\n");
			pre = createElement("pre");
			text4 = createText(text4_value);
			text5 = createText("\r\n");
			p1 = createElement("p");
			text6 = createText("Go ");
			a = createElement("a");
			a.textContent = "home.";
			addLoc(h1, file, 4, 0, 51);
			addLoc(strong, file, 7, 2, 82);
			addLoc(p0, file, 6, 0, 75);
			addLoc(pre, file, 9, 0, 113);
			a.href = "/";
			addLoc(a, file, 10, 6, 162);
			addLoc(p1, file, 10, 0, 156);
		},

		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			insert(target, text1, anchor);
			insert(target, p0, anchor);
			append(p0, strong);
			insert(target, text3, anchor);
			insert(target, pre, anchor);
			append(pre, text4);
			insert(target, text5, anchor);
			insert(target, p1, anchor);
			append(p1, text6);
			append(p1, a);
		},

		p: function update(changed, ctx) {
			if ((changed.route) && text4_value !== (text4_value = JSON.stringify(ctx.route,null,2))) {
				setData(text4, text4_value);
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detach) {
			if (detach) {
				detachNode(h1);
				detachNode(text1);
				detachNode(p0);
				detachNode(text3);
				detachNode(pre);
				detachNode(text5);
				detachNode(p1);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { route = { } } = $$props;

	$$self.$set = $$props => {
		if ('route' in $$props) $$invalidate('route', route = $$props.route);
	};

	return { route };
}

class Regex extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.route === undefined && !('route' in props)) {
			console.warn("<Regex> was created without expected prop 'route'");
		}
	}

	get route() {
		return this.$$.ctx.route;
	}

	set route(route) {
		this.$set({ route });
		flush();
	}
}

export default Regex;
//# sourceMappingURL=Regex.js.map
