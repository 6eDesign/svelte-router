import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, P as Page, r as getContext, v as validate_store, u as component_subscribe, B as mount_component, t as transition_in, e as transition_out, C as destroy_component, f as element, m as space, p as text, h as add_location, E as attr_dev, j as insert_dev, F as append_dev, q as set_data_dev, k as detach_dev } from './Page-16fd0467.js';

/* src\Components\test\RegexRoute.svelte generated by Svelte v3.12.1 */

var file = "src\\Components\\test\\RegexRoute.svelte";

// (8:0) <Page>
function create_default_slot(ctx) {
	var h1, t1, p0, strong, t3, pre, t4_value = JSON.stringify(ctx.$selectedRoute.ctx.params,null,2) + "", t4, t5, p1, t6, a;

	var block = {
		c: function create() {
			h1 = element("h1");
			h1.textContent = "Regex Route";
			t1 = space();
			p0 = element("p");
			strong = element("strong");
			strong.textContent = "route:";
			t3 = space();
			pre = element("pre");
			t4 = text(t4_value);
			t5 = space();
			p1 = element("p");
			t6 = text("Go ");
			a = element("a");
			a.textContent = "home.";
			add_location(h1, file, 8, 2, 219);
			add_location(strong, file, 11, 4, 254);
			add_location(p0, file, 10, 2, 245);
			add_location(pre, file, 13, 2, 289);
			attr_dev(a, "href", "/svelte-router/");
			add_location(a, file, 14, 8, 360);
			add_location(p1, file, 14, 2, 354);
		},

		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, strong);
			insert_dev(target, t3, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t6);
			append_dev(p1, a);
		},

		p: function update(changed, ctx) {
			if ((changed.$selectedRoute) && t4_value !== (t4_value = JSON.stringify(ctx.$selectedRoute.ctx.params,null,2) + "")) {
				set_data_dev(t4, t4_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(h1);
				detach_dev(t1);
				detach_dev(p0);
				detach_dev(t3);
				detach_dev(pre);
				detach_dev(t5);
				detach_dev(p1);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block: block, id: create_default_slot.name, type: "slot", source: "(8:0) <Page>", ctx: ctx });
	return block;
}

function create_fragment(ctx) {
	var current;

	var page = new Page({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx: ctx }
	},
		$$inline: true
	});

	var block = {
		c: function create() {
			page.$$.fragment.c();
		},

		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},

		m: function mount(target, anchor) {
			mount_component(page, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var page_changes = {};
			if (changed.$$scope || changed.$selectedRoute) { page_changes.$$scope = { changed: changed, ctx: ctx }; }
			page.$set(page_changes);
		},

		i: function intro(local) {
			if (current) { return; }
			transition_in(page.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(page.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(page, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block: block, id: create_fragment.name, type: "component", source: "", ctx: ctx });
	return block;
}

function instance($$self, $$props, $$invalidate) {
	var $selectedRoute;

	
  // import { ROUTER } from '../Router.svelte';
  var ref = getContext('ROUTER');
	var selectedRoute = ref.selectedRoute; validate_store(selectedRoute, 'selectedRoute'); component_subscribe($$self, selectedRoute, function ($$value) { $selectedRoute = $$value; $$invalidate('$selectedRoute', $selectedRoute); });

	$$self.$capture_state = function () {
		return {};
	};

	$$self.$inject_state = function ($$props) {
		if ('selectedRoute' in $$props) { $$invalidate('selectedRoute', selectedRoute = $$props.selectedRoute); }
		if ('$selectedRoute' in $$props) { selectedRoute.set($selectedRoute); }
	};

	return { selectedRoute: selectedRoute, $selectedRoute: $selectedRoute };
}

var RegexRoute = /*@__PURE__*/(function (SvelteComponentDev) {
	function RegexRoute(options) {
		SvelteComponentDev.call(this, options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "RegexRoute", options: options, id: create_fragment.name });
	}

	if ( SvelteComponentDev ) RegexRoute.__proto__ = SvelteComponentDev;
	RegexRoute.prototype = Object.create( SvelteComponentDev && SvelteComponentDev.prototype );
	RegexRoute.prototype.constructor = RegexRoute;

	return RegexRoute;
}(SvelteComponentDev));

export default RegexRoute;
//# sourceMappingURL=RegexRoute-2ebddd9d.js.map
