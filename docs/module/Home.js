import { c as SvelteComponentDev, d as addListener, j as addLoc, o as createElement, e as create_slot, q as detachNode, r as flush, f as init, t as insert, b as noop, g as safe_not_equal, i as onMount, l as append, p as createText, x as mount_component } from './chunk-0191df90.js';

/* src\Components\Link.html generated by Svelte v3.0.0-alpha19 */

const file = "src\\Components\\Link.html";

function create_fragment(ctx) {
	var a, dispose;

	const default_slot = create_slot(ctx.$$slot_default, ctx);

	return {
		c: function create() {
			a = createElement("a");

			if (default_slot) default_slot.c();

			a.href = ctx.href;
			addLoc(a, file, 13, 0, 239);
			dispose = addListener(a, "click", ctx.handleClick);
		},

		l: function claim(nodes) {
			if (default_slot) default_slot.l(a_nodes);
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},

		m: function mount(target, anchor) {
			insert(target, a, anchor);

			if (default_slot) {
				default_slot.m(a, null);
			}
		},

		p: function update(changed, ctx) {

			if (default_slot && changed.$$scope) default_slot.p(ctx.$$scope.changed, ctx.$$scope.ctx);

			if (changed.href) {
				a.href = ctx.href;
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detach) {
			if (detach) {
				detachNode(a);
			}

			if (default_slot) default_slot.d(detach);
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { href } = $$props; 

  const handleClick = function(evt) {
    evt.preventDefault(); 
    history.pushState(null,null,location.origin + this.getAttribute('href'));
  };

	let { $$slot_default, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('href' in $$props) $$invalidate('href', href = $$props.href);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return {
		href,
		handleClick,
		$$slot_default,
		$$scope
	};
}

class Link extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.href === undefined && !('href' in props)) {
			console.warn("<Link> was created without expected prop 'href'");
		}
	}

	get href() {
		return this.$$.ctx.href;
	}

	set href(href) {
		this.$set({ href });
		flush();
	}
}

/* src\Components\Home.html generated by Svelte v3.0.0-alpha19 */

const file$1 = "src\\Components\\Home.html";

// (7:5) <Link href="/test">
function create_default_slot(ctx) {
	var text;

	return {
		c: function create() {
			text = createText("test.");
		},

		m: function mount(target, anchor) {
			insert(target, text, anchor);
		},

		d: function destroy(detach) {
			if (detach) {
				detachNode(text);
			}
		}
	};
}

function create_fragment$1(ctx) {
	var h1, text1, p, text2, current;

	var link = new Link({
		props: {
		href: "/test",
		$$slot_default: [create_default_slot],
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = createElement("h1");
			h1.textContent = "Homepage";
			text1 = createText("\r\n");
			p = createElement("p");
			text2 = createText("Go ");
			link.$$.fragment.c();
			addLoc(h1, file$1, 4, 0, 58);
			addLoc(p, file$1, 5, 0, 77);
		},

		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			insert(target, text1, anchor);
			insert(target, p, anchor);
			append(p, text2);
			mount_component(link, p, null);
		},

		p: noop,

		i: function intro() {
			if (current) return;
			link.$$.fragment.i();

			current = true;
		},

		o: function outro() {
			if (link) link.$$.fragment.o();
			current = false;
		},

		d: function destroy(detach) {
			if (detach) {
				detachNode(h1);
				detachNode(text1);
				detachNode(p);
			}

			link.$destroy();
		}
	};
}

class Home extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment$1, safe_not_equal);
	}
}

export default Home;
