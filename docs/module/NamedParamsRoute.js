import { a as SvelteComponentDev, b as addLoc, z as append, c as createElement, i as createText, d as detachNode, e as init, f as insert, g as noop, h as safe_not_equal, k as setData, v as validate_store, w as getContext, y as ROUTER } from './chunk-059d1f2a.js';

/* src\Components\test\NamedParamsRoute.html generated by Svelte v3.0.0-alpha20 */

var file = "src\\Components\\test\\NamedParamsRoute.html";

function create_fragment(ctx) {
	var h1, text1, p0, strong, text3, pre, text4_value = JSON.stringify(ctx.$selectedRoute.ctx,null,2), text4, text5, p1, text6, a;

	return {
		c: function create() {
			h1 = createElement("h1");
			h1.textContent = "Named Params Route";
			text1 = createText("\r\n\r\n");
			p0 = createElement("p");
			strong = createElement("strong");
			strong.textContent = "route:";
			text3 = createText("\r\n");
			pre = createElement("pre");
			text4 = createText(text4_value);
			text5 = createText("\r\n");
			p1 = createElement("p");
			text6 = createText("Go ");
			a = createElement("a");
			a.textContent = "home.";
			addLoc(h1, file, 6, 0, 156);
			addLoc(strong, file, 9, 2, 194);
			addLoc(p0, file, 8, 0, 187);
			addLoc(pre, file, 11, 0, 225);
			a.href = "/";
			addLoc(a, file, 12, 6, 287);
			addLoc(p1, file, 12, 0, 281);
		},

		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			insert(target, text1, anchor);
			insert(target, p0, anchor);
			append(p0, strong);
			insert(target, text3, anchor);
			insert(target, pre, anchor);
			append(pre, text4);
			insert(target, text5, anchor);
			insert(target, p1, anchor);
			append(p1, text6);
			append(p1, a);
		},

		p: function update(changed, ctx) {
			if ((changed.$selectedRoute) && text4_value !== (text4_value = JSON.stringify(ctx.$selectedRoute.ctx,null,2))) {
				setData(text4, text4_value);
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detach) {
			if (detach) {
				detachNode(h1);
				detachNode(text1);
				detachNode(p0);
				detachNode(text3);
				detachNode(pre);
				detachNode(text5);
				detachNode(p1);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
  var ref = getContext(ROUTER);
  var selectedRoute = ref.selectedRoute;

	var $selectedRoute;
	validate_store(selectedRoute, 'selectedRoute');
	$$self.$$.on_destroy.push(selectedRoute.subscribe(function ($$value) { $selectedRoute = $$value; $$invalidate('$selectedRoute', $selectedRoute); }));

	return { $selectedRoute: $selectedRoute };
}

var NamedParamsRoute = /*@__PURE__*/(function (SvelteComponentDev$$1) {
	function NamedParamsRoute(options) {
		SvelteComponentDev$$1.call(this, options);
		init(this, options, instance, create_fragment, safe_not_equal);
	}

	if ( SvelteComponentDev$$1 ) NamedParamsRoute.__proto__ = SvelteComponentDev$$1;
	NamedParamsRoute.prototype = Object.create( SvelteComponentDev$$1 && SvelteComponentDev$$1.prototype );
	NamedParamsRoute.prototype.constructor = NamedParamsRoute;

	return NamedParamsRoute;
}(SvelteComponentDev));

export default NamedParamsRoute;
//# sourceMappingURL=NamedParamsRoute.js.map
