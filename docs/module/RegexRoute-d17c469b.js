import { S as SvelteComponentDev, i as init, s as safe_not_equal, P as Page, w as mount_component, m as transition_in, k as transition_out, x as destroy_component, o as getContext, v as validate_store, p as component_subscribe, e as element, c as space, t as text, a as add_location, B as attr, b as insert, C as append, f as set_data, d as detach, R as ROUTER } from './Page-5f61f180.js';

/* src\Components\test\RegexRoute.html generated by Svelte v3.7.1 */

var file = "src\\Components\\test\\RegexRoute.html";

// (8:0) <Page>
function create_default_slot(ctx) {
	var h1, t1, p0, strong, t3, pre, t4_value = JSON.stringify(ctx.$selectedRoute.ctx,null,2), t4, t5, p1, t6, a;

	return {
		c: function create() {
			h1 = element("h1");
			h1.textContent = "Regex Route";
			t1 = space();
			p0 = element("p");
			strong = element("strong");
			strong.textContent = "route:";
			t3 = space();
			pre = element("pre");
			t4 = text(t4_value);
			t5 = space();
			p1 = element("p");
			t6 = text("Go ");
			a = element("a");
			a.textContent = "home.";
			add_location(h1, file, 8, 2, 210);
			add_location(strong, file, 11, 4, 245);
			add_location(p0, file, 10, 2, 236);
			add_location(pre, file, 13, 2, 280);
			attr(a, "href", "/svelte-router/");
			add_location(a, file, 14, 8, 344);
			add_location(p1, file, 14, 2, 338);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, p0, anchor);
			append(p0, strong);
			insert(target, t3, anchor);
			insert(target, pre, anchor);
			append(pre, t4);
			insert(target, t5, anchor);
			insert(target, p1, anchor);
			append(p1, t6);
			append(p1, a);
		},

		p: function update(changed, ctx) {
			if ((changed.$selectedRoute) && t4_value !== (t4_value = JSON.stringify(ctx.$selectedRoute.ctx,null,2))) {
				set_data(t4, t4_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(p0);
				detach(t3);
				detach(pre);
				detach(t5);
				detach(p1);
			}
		}
	};
}

function create_fragment(ctx) {
	var current;

	var page = new Page({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx: ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			page.$$.fragment.c();
		},

		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},

		m: function mount(target, anchor) {
			mount_component(page, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var page_changes = {};
			if (changed.$$scope || changed.$selectedRoute) { page_changes.$$scope = { changed: changed, ctx: ctx }; }
			page.$set(page_changes);
		},

		i: function intro(local) {
			if (current) { return; }
			transition_in(page.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(page.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(page, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	var $selectedRoute;

	
  var ref = getContext(ROUTER);
	var selectedRoute = ref.selectedRoute; validate_store(selectedRoute, 'selectedRoute'); component_subscribe($$self, selectedRoute, function ($$value) { $selectedRoute = $$value; $$invalidate('$selectedRoute', $selectedRoute); });

	return { selectedRoute: selectedRoute, $selectedRoute: $selectedRoute };
}

var RegexRoute = /*@__PURE__*/(function (SvelteComponentDev) {
	function RegexRoute(options) {
		SvelteComponentDev.call(this, options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}

	if ( SvelteComponentDev ) RegexRoute.__proto__ = SvelteComponentDev;
	RegexRoute.prototype = Object.create( SvelteComponentDev && SvelteComponentDev.prototype );
	RegexRoute.prototype.constructor = RegexRoute;

	return RegexRoute;
}(SvelteComponentDev));

export default RegexRoute;
//# sourceMappingURL=RegexRoute-d17c469b.js.map
